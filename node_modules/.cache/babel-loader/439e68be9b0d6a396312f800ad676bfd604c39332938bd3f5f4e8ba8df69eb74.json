{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst comemntsAdapter = createEntityAdapter({});\nconst initialState = comemntsAdapter.getInitialState();\nexport const commentApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getComments: builder.query({\n      query: () => ({\n        url: '/comments',\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      })\n    }),\n    transformResponse: responseData => {\n      const loadedComments = responseData.map(comment => {\n        comment.id = comment._id;\n        return comment;\n      });\n      return comemntsAdapter.setAll(initialState, loadedComments);\n    }\n  })\n});\nexport const {\n  useGetCommentsQuery\n} = commentApiSlice;\nexport const selectCommentsResults = commentApiSlice.endpoints.getComments.select();\nconst selectCommentsData = createSelector(selectCommentsResults, comments => comments.data);\nexport const {\n  selectAll: selectAllComments,\n  selectById: selectCommentById,\n  selectIds: selectCommentIds\n} = comemntsAdapter.getSelectors(state => {\n  var _selectCommentsData;\n  return (_selectCommentsData = selectCommentsData(state)) !== null && _selectCommentsData !== void 0 ? _selectCommentsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","comemntsAdapter","initialState","getInitialState","commentApiSlice","injectEndpoints","endpoints","builder","getComments","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedComments","map","comment","id","_id","setAll","useGetCommentsQuery","selectCommentsResults","select","selectCommentsData","comments","data","selectAll","selectAllComments","selectById","selectCommentById","selectIds","selectCommentIds","getSelectors","state","_selectCommentsData"],"sources":["/Users/sebastians/EventSphere/event-sphere-frontend/src/features/comments/CommentApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst comemntsAdapter = createEntityAdapter({})\nconst initialState = comemntsAdapter.getInitialState()\n\nexport const commentApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getComments: builder.query({\n            query: ()=>({\n                url: '/comments',\n                validateStatus: (response, result) => {\n                    return response.status === 200 && !result.isError\n                },\n            })\n        }),\n        transformResponse: responseData => {\n            const loadedComments = responseData.map(comment => {\n                comment.id = comment._id\n                return comment\n            });\n            return comemntsAdapter.setAll(initialState, loadedComments)\n        }\n    }),\n})\n\nexport const {\n    useGetCommentsQuery,\n} = commentApiSlice\n\nexport const selectCommentsResults = commentApiSlice.endpoints.getComments.select()\n\nconst selectCommentsData = createSelector(\n    selectCommentsResults,\n    comments => comments.data\n)\n\nexport const {\n    selectAll: selectAllComments,\n    selectById: selectCommentById,\n    selectIds: selectCommentIds\n} = comemntsAdapter.getSelectors(state => selectCommentsData(state) ?? initialState)\n"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,eAAe,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC/C,MAAMG,YAAY,GAAGD,eAAe,CAACE,eAAe,CAAC,CAAC;AAEtD,OAAO,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACpDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;MACvBA,KAAK,EAAEA,CAAA,MAAK;QACRC,GAAG,EAAE,WAAW;QAChBC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;UAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;QACrD;MACJ,CAAC;IACL,CAAC,CAAC;IACFC,iBAAiB,EAAEC,YAAY,IAAI;MAC/B,MAAMC,cAAc,GAAGD,YAAY,CAACE,GAAG,CAACC,OAAO,IAAI;QAC/CA,OAAO,CAACC,EAAE,GAAGD,OAAO,CAACE,GAAG;QACxB,OAAOF,OAAO;MAClB,CAAC,CAAC;MACF,OAAOnB,eAAe,CAACsB,MAAM,CAACrB,YAAY,EAAEgB,cAAc,CAAC;IAC/D;EACJ,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTM;AACJ,CAAC,GAAGpB,eAAe;AAEnB,OAAO,MAAMqB,qBAAqB,GAAGrB,eAAe,CAACE,SAAS,CAACE,WAAW,CAACkB,MAAM,CAAC,CAAC;AAEnF,MAAMC,kBAAkB,GAAG7B,cAAc,CACrC2B,qBAAqB,EACrBG,QAAQ,IAAIA,QAAQ,CAACC,IACzB,CAAC;AAED,OAAO,MAAM;EACTC,SAAS,EAAEC,iBAAiB;EAC5BC,UAAU,EAAEC,iBAAiB;EAC7BC,SAAS,EAAEC;AACf,CAAC,GAAGlC,eAAe,CAACmC,YAAY,CAACC,KAAK;EAAA,IAAAC,mBAAA;EAAA,QAAAA,mBAAA,GAAIX,kBAAkB,CAACU,KAAK,CAAC,cAAAC,mBAAA,cAAAA,mBAAA,GAAIpC,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}