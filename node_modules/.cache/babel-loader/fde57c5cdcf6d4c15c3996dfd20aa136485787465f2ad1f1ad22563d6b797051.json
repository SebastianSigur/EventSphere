{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst eventsAdapter = createEntityAdapter({});\nconst initialState = eventsAdapter.getInitialState();\nexport const eventsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getEvents: builder.query({\n      query: () => ({\n        url: '/events',\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.error;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedEvents = responseData.map(event => {\n          event.id = event._id;\n          return event;\n        });\n        return eventsAdapter.setAll(initialState, loadedEvents);\n      },\n      provideTages: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          // if result is not undefined and has ids\n          return [{\n            type: 'Event',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Event',\n            id\n          }))];\n        } else return [{\n          type: 'Event',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewEvent: builder.mutation({\n      q\n    })\n  })\n});\nexport const {\n  useGetEventsQuery\n} = eventsApiSlice;\nexport const selectEventsResult = eventsApiSlice.endpoints.getEvents.select();\nconst selectEventsData = createSelector(selectEventsResult, eventsResult => eventsResult.data);\nexport const {\n  selectAll: selectAllEvents,\n  selectById: selectEventById,\n  selectIds: selectEventIds\n} = eventsAdapter.getSelectors(state => {\n  var _selectEventsData;\n  return (_selectEventsData = selectEventsData(state)) !== null && _selectEventsData !== void 0 ? _selectEventsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","eventsAdapter","initialState","getInitialState","eventsApiSlice","injectEndpoints","endpoints","builder","getEvents","query","url","validateStatus","response","result","status","error","transformResponse","responseData","loadedEvents","map","event","id","_id","setAll","provideTages","arg","ids","type","addNewEvent","mutation","q","useGetEventsQuery","selectEventsResult","select","selectEventsData","eventsResult","data","selectAll","selectAllEvents","selectById","selectEventById","selectIds","selectEventIds","getSelectors","state","_selectEventsData"],"sources":["/Users/sebastians/EventSphere/event-sphere-frontend/src/features/events/EventApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\n\nconst eventsAdapter = createEntityAdapter({})\nconst initialState = eventsAdapter.getInitialState()\n\n\nexport const eventsApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getEvents: builder.query({\n            query: () => ({\n                url: '/events',\n                validateStatus: (response, result) => {\n                    return response.status === 200 && !result.error\n                }\n            }),\n            transformResponse: responseData => {\n                const loadedEvents = responseData.map(event => {\n                    event.id = event._id\n                    return event\n                })\n                return eventsAdapter.setAll(initialState, loadedEvents)\n            },\n            provideTages: (result, error, arg) => {\n                if(result?.ids){ // if result is not undefined and has ids\n                    return [\n                        {type: 'Event', id: 'LIST'},\n                        ...result.ids.map(id => ({type: 'Event', id}))\n                    ]\n                } else return [{type: 'Event', id: 'LIST'}]\n            }\n        }),\n        addNewEvent: builder.mutation({\n            q\n        })\n    })\n})\n\n\nexport const {\n    useGetEventsQuery\n} = eventsApiSlice\n\nexport const selectEventsResult = eventsApiSlice.endpoints.getEvents.select()\n\nconst selectEventsData = createSelector(\n    selectEventsResult,\n    eventsResult => eventsResult.data \n)\n\nexport const {\n    selectAll: selectAllEvents,\n    selectById: selectEventById,\n    selectIds: selectEventIds\n} = eventsAdapter.getSelectors(state => selectEventsData(state) ?? initialState)\n"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAGjD,MAAMC,aAAa,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC7C,MAAMG,YAAY,GAAGD,aAAa,CAACE,eAAe,CAAC,CAAC;AAGpD,OAAO,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACnDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAEA,CAAA,MAAO;QACVC,GAAG,EAAE,SAAS;QACdC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;UAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,KAAK;QACnD;MACJ,CAAC,CAAC;MACFC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,YAAY,GAAGD,YAAY,CAACE,GAAG,CAACC,KAAK,IAAI;UAC3CA,KAAK,CAACC,EAAE,GAAGD,KAAK,CAACE,GAAG;UACpB,OAAOF,KAAK;QAChB,CAAC,CAAC;QACF,OAAOnB,aAAa,CAACsB,MAAM,CAACrB,YAAY,EAAEgB,YAAY,CAAC;MAC3D,CAAC;MACDM,YAAY,EAAEA,CAACX,MAAM,EAAEE,KAAK,EAAEU,GAAG,KAAK;QAClC,IAAGZ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEa,GAAG,EAAC;UAAE;UACb,OAAO,CACH;YAACC,IAAI,EAAE,OAAO;YAAEN,EAAE,EAAE;UAAM,CAAC,EAC3B,GAAGR,MAAM,CAACa,GAAG,CAACP,GAAG,CAACE,EAAE,KAAK;YAACM,IAAI,EAAE,OAAO;YAAEN;UAAE,CAAC,CAAC,CAAC,CACjD;QACL,CAAC,MAAM,OAAO,CAAC;UAACM,IAAI,EAAE,OAAO;UAAEN,EAAE,EAAE;QAAM,CAAC,CAAC;MAC/C;IACJ,CAAC,CAAC;IACFO,WAAW,EAAErB,OAAO,CAACsB,QAAQ,CAAC;MAC1BC;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAGF,OAAO,MAAM;EACTC;AACJ,CAAC,GAAG3B,cAAc;AAElB,OAAO,MAAM4B,kBAAkB,GAAG5B,cAAc,CAACE,SAAS,CAACE,SAAS,CAACyB,MAAM,CAAC,CAAC;AAE7E,MAAMC,gBAAgB,GAAGpC,cAAc,CACnCkC,kBAAkB,EAClBG,YAAY,IAAIA,YAAY,CAACC,IACjC,CAAC;AAED,OAAO,MAAM;EACTC,SAAS,EAAEC,eAAe;EAC1BC,UAAU,EAAEC,eAAe;EAC3BC,SAAS,EAAEC;AACf,CAAC,GAAGzC,aAAa,CAAC0C,YAAY,CAACC,KAAK;EAAA,IAAAC,iBAAA;EAAA,QAAAA,iBAAA,GAAIX,gBAAgB,CAACU,KAAK,CAAC,cAAAC,iBAAA,cAAAA,iBAAA,GAAI3C,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}